package pFinal.paint_basico_2d;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.FileFilter;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.ffm.eventos.LienzoEvent;
import sm.ffm.eventos.LienzoListener;
import sm.ffm.graficos.MyRelleno;
import sm.ffm.graficos.MyShape;
import sm.ffm.graficos.MyShapeArco;
import sm.ffm.graficos.MyShapeElipse;
import sm.ffm.graficos.MyShapeLinea;
import sm.ffm.graficos.MyShapeRectangulo;
import sm.ffm.imagen.MyOpPropia;
import sm.ffm.imagen.MyOpPropia2;
import sm.ffm.imagen.SepiaOp;
import sm.ffm.imagen.UmbralizacionOp;
import sm.ffm.iu.Colores;
import sm.ffm.iu.LienzoImagen2D;
import sm.image.BlendOp;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SubtractionOp;
import sm.image.TintOp;
import sm.sound.SMAudioClipPlayer;
import sm.sound.SMPlayer;
import sm.sound.SMRecorder;
import sm.sound.SMSoundRecorder;

/**
 *
 * @author francisco
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    public class MiManejadorLienzo implements LienzoListener{
        @Override
        public void shapeAdded(LienzoEvent evt) {
            listaFiguras.addItem(evt.getForma());
        }
    }
    
    MiManejadorLienzo manejador = new MiManejadorLienzo();
    
    BufferedImage imgSource;
    boolean bandas = false;
    private SMPlayer player = null;
    private SMRecorder recorder = null;
    private File grabacion = null;
    private VentanaInternaCamara vIC = null;
    private VentanaInternaVLCPlayer vVLC = null;
    private MyShape shapeSelec, shapeTxt;
    private int anchoVentana = 500;
    private int altoVentana = 300;
    private final Color paletaColores[] = {Color.BLACK, Color.RED, Color.BLUE, Color.WHITE, Color.YELLOW, Color.GREEN};
    private final float filtroNorte[] = {1, 1, 1,
                                        1, -2, 1,
                                       -1, -1, -1};
    private final float filtroEste[] = {-1, 1, 1,
                                        -1, -2, 1,
                                        -1, 1, 1};
    private final float filtroGauss[] = {1, 2, 3, 1, 1,
                                         2, 7, 11, 7, 2,
                                         3, 11, 17, 11, 3, 
                                         2, 7, 11, 7, 1,
                                         1, 2, 3, 2, 1};
    
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        
        this.setExtendedState(MAXIMIZED_BOTH);
        
        this.listaColores.setModel(new DefaultComboBoxModel(paletaColores));
        this.listaColores.setRenderer(new Colores());
        
        this.listaColores2.setModel(new DefaultComboBoxModel(paletaColores));
        this.listaColores2.setRenderer(new Colores());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonesHerr = new javax.swing.ButtonGroup();
        barraHerramientas = new javax.swing.JToolBar();
        panelBarraHerr1 = new javax.swing.JPanel();
        btnBHNuevo = new javax.swing.JButton();
        btnBHAbrir = new javax.swing.JButton();
        btnBHGuardar = new javax.swing.JButton();
        separador1 = new javax.swing.JToolBar.Separator();
        panelBarraHerr2 = new javax.swing.JPanel();
        btnLapiz = new javax.swing.JToggleButton();
        btnLinea = new javax.swing.JToggleButton();
        btnRectangulo = new javax.swing.JToggleButton();
        btnElipse = new javax.swing.JToggleButton();
        btnRecRedondeado = new javax.swing.JToggleButton();
        btnArco = new javax.swing.JToggleButton();
        separador2 = new javax.swing.JToolBar.Separator();
        panelBarraHerr3 = new javax.swing.JPanel();
        txtTrazo = new javax.swing.JLabel();
        btnPaleta1 = new javax.swing.JButton();
        listaColores = new javax.swing.JComboBox<>();
        txtRelleno = new javax.swing.JLabel();
        btnPaleta2 = new javax.swing.JButton();
        listaColores2 = new javax.swing.JComboBox<>();
        separador3 = new javax.swing.JToolBar.Separator();
        panelBarraHerr4 = new javax.swing.JPanel();
        spinnerGrosor = new javax.swing.JSpinner();
        listaTipoTrazos = new javax.swing.JComboBox<>();
        panelBarraHerr5 = new javax.swing.JPanel();
        listaTiposRelleno = new javax.swing.JComboBox<>();
        btnAlisado = new javax.swing.JToggleButton();
        btnTransparencia = new javax.swing.JToggleButton();
        sliderTransparencia = new javax.swing.JSlider();
        separador4 = new javax.swing.JToolBar.Separator();
        btnPlaySonido = new javax.swing.JButton();
        btnStopSonido = new javax.swing.JButton();
        listaReproduccionSonido = new javax.swing.JComboBox<>();
        separador5 = new javax.swing.JToolBar.Separator();
        btnGrabarSonido = new javax.swing.JToggleButton();
        separador6 = new javax.swing.JToolBar.Separator();
        btnCamara = new javax.swing.JButton();
        btnCapturaWebcam = new javax.swing.JButton();
        separador7 = new javax.swing.JToolBar.Separator();
        btnEditar = new javax.swing.JToggleButton();
        listaFiguras = new javax.swing.JComboBox<>();
        panelBarraEstado = new javax.swing.JPanel();
        txtBarraEstado = new javax.swing.JLabel();
        txtValorRGB = new javax.swing.JLabel();
        panelCentral = new javax.swing.JPanel();
        escritorio = new javax.swing.JDesktopPane();
        barraLateral = new javax.swing.JToolBar();
        panelMover = new javax.swing.JPanel();
        txtFormateadoX = new javax.swing.JFormattedTextField();
        txtFormateadoY = new javax.swing.JFormattedTextField();
        btnMoverFigura = new javax.swing.JButton();
        txtCoordenadasXY = new javax.swing.JLabel();
        barraEdicion = new javax.swing.JToolBar();
        panelDuplicar = new javax.swing.JPanel();
        btnDuplicarVentana = new javax.swing.JButton();
        panelBrillo = new javax.swing.JPanel();
        sliderBrillo = new javax.swing.JSlider();
        panelFiltros = new javax.swing.JPanel();
        listaFiltros = new javax.swing.JComboBox<>();
        panelContraste = new javax.swing.JPanel();
        btnContraste = new javax.swing.JButton();
        btnIluminar = new javax.swing.JButton();
        btnOscurecer = new javax.swing.JButton();
        panelOperaciones = new javax.swing.JPanel();
        btnSeno = new javax.swing.JButton();
        btnSepia = new javax.swing.JButton();
        btnTintado = new javax.swing.JButton();
        btnEcualizar = new javax.swing.JButton();
        btnNegativo = new javax.swing.JButton();
        btnLookupOpPropio = new javax.swing.JButton();
        btnOpPropia = new javax.swing.JButton();
        listaDisfunsionVisual = new javax.swing.JComboBox<>();
        btnOpPropia2 = new javax.swing.JButton();
        panelColor = new javax.swing.JPanel();
        btnBandas = new javax.swing.JButton();
        listaEspacioColor = new javax.swing.JComboBox<>();
        panelRotacion = new javax.swing.JPanel();
        sliderRotacion = new javax.swing.JSlider();
        btnRotacion90 = new javax.swing.JButton();
        btnRotacion180 = new javax.swing.JButton();
        btnRotacion270 = new javax.swing.JButton();
        panelEscalado = new javax.swing.JPanel();
        btnAumentarEscala = new javax.swing.JButton();
        btnDisminuirEscala = new javax.swing.JButton();
        panelUmbralización = new javax.swing.JPanel();
        sliderUmbralización = new javax.swing.JSlider();
        panelBinarios = new javax.swing.JPanel();
        btnSumaBinaria = new javax.swing.JButton();
        btnRestaBinaria = new javax.swing.JButton();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuArchivoNuevo = new javax.swing.JMenuItem();
        menuArchivoAbrir = new javax.swing.JMenuItem();
        menuArchivoGuardar = new javax.swing.JMenuItem();
        menuVer = new javax.swing.JMenu();
        checkBarraEstado = new javax.swing.JCheckBoxMenuItem();
        checkBarraFormas = new javax.swing.JCheckBoxMenuItem();
        checkBarraEdicion = new javax.swing.JCheckBoxMenuItem();
        checkBarraLateral = new javax.swing.JCheckBoxMenuItem();
        menuImagen = new javax.swing.JMenu();
        menuImagenRedimensionar = new javax.swing.JMenuItem();
        menuImagenDuplicar = new javax.swing.JMenuItem();
        menuAyuda = new javax.swing.JMenu();
        menuAyudaAcercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        barraHerramientas.setRollover(true);
        barraHerramientas.setPreferredSize(new java.awt.Dimension(100, 35));

        panelBarraHerr1.setPreferredSize(new java.awt.Dimension(90, 30));
        panelBarraHerr1.setLayout(new java.awt.GridLayout(1, 3));

        btnBHNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        btnBHNuevo.setToolTipText("Nuevo");
        btnBHNuevo.setFocusable(false);
        btnBHNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnBHNuevo.setPreferredSize(new java.awt.Dimension(32, 32));
        btnBHNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnBHNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBHNuevoActionPerformed(evt);
            }
        });
        panelBarraHerr1.add(btnBHNuevo);

        btnBHAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        btnBHAbrir.setToolTipText("Abrir");
        btnBHAbrir.setPreferredSize(new java.awt.Dimension(32, 32));
        btnBHAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBHAbrirActionPerformed(evt);
            }
        });
        panelBarraHerr1.add(btnBHAbrir);

        btnBHGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        btnBHGuardar.setToolTipText("Guardar");
        btnBHGuardar.setPreferredSize(new java.awt.Dimension(32, 32));
        btnBHGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBHGuardarActionPerformed(evt);
            }
        });
        panelBarraHerr1.add(btnBHGuardar);

        barraHerramientas.add(panelBarraHerr1);
        barraHerramientas.add(separador1);

        panelBarraHerr2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        panelBarraHerr2.setPreferredSize(new java.awt.Dimension(200, 38));
        panelBarraHerr2.setLayout(new java.awt.GridLayout(1, 4));

        botonesHerr.add(btnLapiz);
        btnLapiz.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        btnLapiz.setToolTipText("Punto");
        btnLapiz.setFocusable(false);
        btnLapiz.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLapiz.setPreferredSize(new java.awt.Dimension(32, 32));
        btnLapiz.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLapiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLapizActionPerformed(evt);
            }
        });
        panelBarraHerr2.add(btnLapiz);

        botonesHerr.add(btnLinea);
        btnLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        btnLinea.setToolTipText("Línea");
        btnLinea.setFocusable(false);
        btnLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLinea.setPreferredSize(new java.awt.Dimension(32, 32));
        btnLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLineaActionPerformed(evt);
            }
        });
        panelBarraHerr2.add(btnLinea);

        botonesHerr.add(btnRectangulo);
        btnRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        btnRectangulo.setToolTipText("Rectángulo");
        btnRectangulo.setFocusable(false);
        btnRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRectangulo.setPreferredSize(new java.awt.Dimension(32, 32));
        btnRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRectanguloActionPerformed(evt);
            }
        });
        panelBarraHerr2.add(btnRectangulo);

        botonesHerr.add(btnElipse);
        btnElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        btnElipse.setToolTipText("Elipse");
        btnElipse.setFocusable(false);
        btnElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnElipse.setPreferredSize(new java.awt.Dimension(32, 32));
        btnElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElipseActionPerformed(evt);
            }
        });
        panelBarraHerr2.add(btnElipse);

        botonesHerr.add(btnRecRedondeado);
        btnRecRedondeado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/recRedondeado.png"))); // NOI18N
        btnRecRedondeado.setToolTipText("Rectángulo redondeado");
        btnRecRedondeado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecRedondeadoActionPerformed(evt);
            }
        });
        panelBarraHerr2.add(btnRecRedondeado);

        botonesHerr.add(btnArco);
        btnArco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconoArco.png"))); // NOI18N
        btnArco.setToolTipText("Arco");
        btnArco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArcoActionPerformed(evt);
            }
        });
        panelBarraHerr2.add(btnArco);

        barraHerramientas.add(panelBarraHerr2);
        barraHerramientas.add(separador2);

        panelBarraHerr3.setPreferredSize(new java.awt.Dimension(350, 32));
        panelBarraHerr3.setLayout(new java.awt.GridLayout(1, 6));

        txtTrazo.setText("Trazo");
        txtTrazo.setPreferredSize(new java.awt.Dimension(30, 15));
        panelBarraHerr3.add(txtTrazo);

        btnPaleta1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/paleta.png"))); // NOI18N
        btnPaleta1.setToolTipText("Paleta de colores");
        btnPaleta1.setFocusable(false);
        btnPaleta1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPaleta1.setPreferredSize(new java.awt.Dimension(30, 36));
        btnPaleta1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPaleta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaleta1ActionPerformed(evt);
            }
        });
        panelBarraHerr3.add(btnPaleta1);

        listaColores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Negro", "Rojo", "Azul", "Blanco", "Amarillo", "Verde" }));
        listaColores.setToolTipText("Lista de colores");
        listaColores.setPreferredSize(new java.awt.Dimension(30, 32));
        listaColores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaColoresActionPerformed(evt);
            }
        });
        panelBarraHerr3.add(listaColores);

        txtRelleno.setText("Relleno");
        txtRelleno.setPreferredSize(new java.awt.Dimension(30, 15));
        panelBarraHerr3.add(txtRelleno);

        btnPaleta2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/paleta.png"))); // NOI18N
        btnPaleta2.setToolTipText("Paleta de colores");
        btnPaleta2.setFocusable(false);
        btnPaleta2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPaleta2.setPreferredSize(new java.awt.Dimension(30, 36));
        btnPaleta2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPaleta2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaleta2ActionPerformed(evt);
            }
        });
        panelBarraHerr3.add(btnPaleta2);

        listaColores2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Negro", "Rojo", "Azul", "Blanco", "Amarillo", "Verde" }));
        listaColores2.setToolTipText("Lista de colores");
        listaColores2.setPreferredSize(new java.awt.Dimension(30, 32));
        listaColores2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaColores2ActionPerformed(evt);
            }
        });
        panelBarraHerr3.add(listaColores2);

        barraHerramientas.add(panelBarraHerr3);
        barraHerramientas.add(separador3);

        panelBarraHerr4.setPreferredSize(new java.awt.Dimension(110, 39));
        panelBarraHerr4.setLayout(new java.awt.BorderLayout());

        spinnerGrosor.setModel(new javax.swing.SpinnerNumberModel(1, 1, 25, 1));
        spinnerGrosor.setToolTipText("Nivel grosor");
        spinnerGrosor.setPreferredSize(new java.awt.Dimension(50, 32));
        spinnerGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerGrosorStateChanged(evt);
            }
        });
        panelBarraHerr4.add(spinnerGrosor, java.awt.BorderLayout.LINE_START);

        listaTipoTrazos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "____", "- - -  " }));
        listaTipoTrazos.setToolTipText("Lista de trazos");
        listaTipoTrazos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaTipoTrazosActionPerformed(evt);
            }
        });
        panelBarraHerr4.add(listaTipoTrazos, java.awt.BorderLayout.LINE_END);

        barraHerramientas.add(panelBarraHerr4);

        panelBarraHerr5.setPreferredSize(new java.awt.Dimension(220, 35));
        panelBarraHerr5.setLayout(new java.awt.BorderLayout());

        listaTiposRelleno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sin relleno", "Relleno liso", "Deg. Vertical", "Deg. Horizontal", "Deg. Diagonal" }));
        listaTiposRelleno.setToolTipText("Lista de rellenos");
        listaTiposRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaTiposRellenoActionPerformed(evt);
            }
        });
        panelBarraHerr5.add(listaTiposRelleno, java.awt.BorderLayout.LINE_START);

        btnAlisado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        btnAlisado.setToolTipText("Alisado");
        btnAlisado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlisadoActionPerformed(evt);
            }
        });
        panelBarraHerr5.add(btnAlisado, java.awt.BorderLayout.CENTER);

        btnTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        btnTransparencia.setToolTipText("Transparencia");
        btnTransparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransparenciaActionPerformed(evt);
            }
        });
        panelBarraHerr5.add(btnTransparencia, java.awt.BorderLayout.LINE_END);

        barraHerramientas.add(panelBarraHerr5);

        sliderTransparencia.setMaximum(10);
        sliderTransparencia.setToolTipText("Nivel de transparencia");
        sliderTransparencia.setValue(0);
        sliderTransparencia.setPreferredSize(new java.awt.Dimension(100, 21));
        sliderTransparencia.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderTransparenciaStateChanged(evt);
            }
        });
        barraHerramientas.add(sliderTransparencia);
        barraHerramientas.add(separador4);

        btnPlaySonido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play24x24.png"))); // NOI18N
        btnPlaySonido.setToolTipText("Play");
        btnPlaySonido.setFocusable(false);
        btnPlaySonido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPlaySonido.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPlaySonido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaySonidoActionPerformed(evt);
            }
        });
        barraHerramientas.add(btnPlaySonido);

        btnStopSonido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stop24x24.png"))); // NOI18N
        btnStopSonido.setToolTipText("Pausa/Stop");
        btnStopSonido.setFocusable(false);
        btnStopSonido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnStopSonido.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnStopSonido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopSonidoActionPerformed(evt);
            }
        });
        barraHerramientas.add(btnStopSonido);

        listaReproduccionSonido.setToolTipText("Lista de reproducción");
        listaReproduccionSonido.setPreferredSize(new java.awt.Dimension(150, 25));
        barraHerramientas.add(listaReproduccionSonido);
        barraHerramientas.add(separador5);

        btnGrabarSonido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record24x24.png"))); // NOI18N
        btnGrabarSonido.setToolTipText("Grabar");
        btnGrabarSonido.setFocusable(false);
        btnGrabarSonido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGrabarSonido.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGrabarSonido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrabarSonidoActionPerformed(evt);
            }
        });
        barraHerramientas.add(btnGrabarSonido);
        barraHerramientas.add(separador6);

        btnCamara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Camara.png"))); // NOI18N
        btnCamara.setToolTipText("Webcam");
        btnCamara.setFocusable(false);
        btnCamara.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCamara.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCamara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCamaraActionPerformed(evt);
            }
        });
        barraHerramientas.add(btnCamara);

        btnCapturaWebcam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Capturar.png"))); // NOI18N
        btnCapturaWebcam.setToolTipText("Captura imagen/video");
        btnCapturaWebcam.setFocusable(false);
        btnCapturaWebcam.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCapturaWebcam.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCapturaWebcam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCapturaWebcamActionPerformed(evt);
            }
        });
        barraHerramientas.add(btnCapturaWebcam);
        barraHerramientas.add(separador7);

        botonesHerr.add(btnEditar);
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        btnEditar.setToolTipText("Editar");
        btnEditar.setPreferredSize(new java.awt.Dimension(32, 32));
        btnEditar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                btnEditarStateChanged(evt);
            }
        });
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        barraHerramientas.add(btnEditar);

        listaFiguras.setToolTipText("Lista de figuras");
        listaFiguras.setPreferredSize(new java.awt.Dimension(300, 25));
        listaFiguras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaFigurasActionPerformed(evt);
            }
        });
        barraHerramientas.add(listaFiguras);

        getContentPane().add(barraHerramientas, java.awt.BorderLayout.PAGE_START);

        panelBarraEstado.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelBarraEstado.setPreferredSize(new java.awt.Dimension(400, 25));

        txtBarraEstado.setText("Barra de estado");

        txtValorRGB.setText("RGB");

        javax.swing.GroupLayout panelBarraEstadoLayout = new javax.swing.GroupLayout(panelBarraEstado);
        panelBarraEstado.setLayout(panelBarraEstadoLayout);
        panelBarraEstadoLayout.setHorizontalGroup(
            panelBarraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBarraEstadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtBarraEstado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1956, Short.MAX_VALUE)
                .addComponent(txtValorRGB)
                .addContainerGap())
        );
        panelBarraEstadoLayout.setVerticalGroup(
            panelBarraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBarraEstadoLayout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addGroup(panelBarraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBarraEstado)
                    .addComponent(txtValorRGB)))
        );

        getContentPane().add(panelBarraEstado, java.awt.BorderLayout.PAGE_END);

        panelCentral.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1929, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 704, Short.MAX_VALUE)
        );

        panelCentral.add(escritorio, java.awt.BorderLayout.CENTER);

        barraLateral.setOrientation(javax.swing.SwingConstants.VERTICAL);
        barraLateral.setRollover(true);
        barraLateral.setPreferredSize(new java.awt.Dimension(170, 25));

        panelMover.setBorder(javax.swing.BorderFactory.createTitledBorder("Mover"));
        panelMover.setPreferredSize(new java.awt.Dimension(165, 115));
        panelMover.setLayout(new java.awt.BorderLayout());

        txtFormateadoX.setPreferredSize(new java.awt.Dimension(55, 27));
        panelMover.add(txtFormateadoX, java.awt.BorderLayout.LINE_START);

        txtFormateadoY.setPreferredSize(new java.awt.Dimension(55, 27));
        panelMover.add(txtFormateadoY, java.awt.BorderLayout.LINE_END);

        btnMoverFigura.setText("Mover");
        btnMoverFigura.setToolTipText("Mover figura");
        btnMoverFigura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoverFiguraActionPerformed(evt);
            }
        });
        panelMover.add(btnMoverFigura, java.awt.BorderLayout.PAGE_END);

        txtCoordenadasXY.setText("Coordenadas X-Y:");
        txtCoordenadasXY.setPreferredSize(new java.awt.Dimension(20, 15));
        panelMover.add(txtCoordenadasXY, java.awt.BorderLayout.PAGE_START);

        barraLateral.add(panelMover);

        panelCentral.add(barraLateral, java.awt.BorderLayout.LINE_END);

        barraEdicion.setRollover(true);
        barraEdicion.setPreferredSize(new java.awt.Dimension(100, 100));

        panelDuplicar.setBorder(javax.swing.BorderFactory.createTitledBorder("Duplicar"));
        panelDuplicar.setPreferredSize(new java.awt.Dimension(80, 80));
        panelDuplicar.setLayout(new java.awt.BorderLayout());

        btnDuplicarVentana.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/duplicar.png"))); // NOI18N
        btnDuplicarVentana.setToolTipText("Duplicar");
        btnDuplicarVentana.setPreferredSize(new java.awt.Dimension(40, 35));
        btnDuplicarVentana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDuplicarVentanaActionPerformed(evt);
            }
        });
        panelDuplicar.add(btnDuplicarVentana, java.awt.BorderLayout.CENTER);

        barraEdicion.add(panelDuplicar);

        panelBrillo.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));
        panelBrillo.setPreferredSize(new java.awt.Dimension(150, 80));
        panelBrillo.setLayout(new java.awt.BorderLayout());

        sliderBrillo.setMaximum(255);
        sliderBrillo.setMinimum(-255);
        sliderBrillo.setToolTipText("Brillo");
        sliderBrillo.setValue(0);
        sliderBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBrilloStateChanged(evt);
            }
        });
        sliderBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusLost(evt);
            }
        });
        panelBrillo.add(sliderBrillo, java.awt.BorderLayout.CENTER);

        barraEdicion.add(panelBrillo);

        panelFiltros.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"));
        panelFiltros.setPreferredSize(new java.awt.Dimension(132, 80));
        panelFiltros.setLayout(new java.awt.BorderLayout());

        listaFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplacaino", "Filtro norte", "Filtro este", "Filtro Gauss" }));
        listaFiltros.setToolTipText("Lista de filtros");
        listaFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaFiltrosActionPerformed(evt);
            }
        });
        panelFiltros.add(listaFiltros, java.awt.BorderLayout.CENTER);

        barraEdicion.add(panelFiltros);

        panelContraste.setBorder(javax.swing.BorderFactory.createTitledBorder("Contraste"));
        panelContraste.setPreferredSize(new java.awt.Dimension(150, 80));

        btnContraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        btnContraste.setToolTipText("Contraste");
        btnContraste.setFocusable(false);
        btnContraste.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnContraste.setPreferredSize(new java.awt.Dimension(35, 28));
        btnContraste.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContrasteActionPerformed(evt);
            }
        });
        panelContraste.add(btnContraste);

        btnIluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        btnIluminar.setToolTipText("Iluminar");
        btnIluminar.setFocusable(false);
        btnIluminar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnIluminar.setPreferredSize(new java.awt.Dimension(35, 28));
        btnIluminar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnIluminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIluminarActionPerformed(evt);
            }
        });
        panelContraste.add(btnIluminar);

        btnOscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        btnOscurecer.setToolTipText("Oscurecer");
        btnOscurecer.setPreferredSize(new java.awt.Dimension(35, 28));
        btnOscurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOscurecerActionPerformed(evt);
            }
        });
        panelContraste.add(btnOscurecer);

        barraEdicion.add(panelContraste);

        panelOperaciones.setBorder(javax.swing.BorderFactory.createTitledBorder(" "));
        panelOperaciones.setPreferredSize(new java.awt.Dimension(515, 80));

        btnSeno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sinusoidal.png"))); // NOI18N
        btnSeno.setToolTipText("Función seno");
        btnSeno.setPreferredSize(new java.awt.Dimension(40, 35));
        btnSeno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSenoActionPerformed(evt);
            }
        });
        panelOperaciones.add(btnSeno);

        btnSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        btnSepia.setToolTipText("Sepia");
        btnSepia.setPreferredSize(new java.awt.Dimension(40, 35));
        btnSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSepiaActionPerformed(evt);
            }
        });
        panelOperaciones.add(btnSepia);

        btnTintado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/tintar.png"))); // NOI18N
        btnTintado.setToolTipText("Tintado");
        btnTintado.setPreferredSize(new java.awt.Dimension(40, 35));
        btnTintado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTintadoActionPerformed(evt);
            }
        });
        panelOperaciones.add(btnTintado);

        btnEcualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ecualizar.png"))); // NOI18N
        btnEcualizar.setToolTipText("Ecualizar");
        btnEcualizar.setPreferredSize(new java.awt.Dimension(40, 35));
        btnEcualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEcualizarActionPerformed(evt);
            }
        });
        panelOperaciones.add(btnEcualizar);

        btnNegativo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconoNegativo.png"))); // NOI18N
        btnNegativo.setToolTipText("Negativo");
        btnNegativo.setPreferredSize(new java.awt.Dimension(40, 35));
        btnNegativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNegativoActionPerformed(evt);
            }
        });
        panelOperaciones.add(btnNegativo);

        btnLookupOpPropio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/operadorPropio.png"))); // NOI18N
        btnLookupOpPropio.setToolTipText("Función propia");
        btnLookupOpPropio.setPreferredSize(new java.awt.Dimension(40, 35));
        btnLookupOpPropio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLookupOpPropioActionPerformed(evt);
            }
        });
        panelOperaciones.add(btnLookupOpPropio);

        btnOpPropia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disfunsionVisual.png"))); // NOI18N
        btnOpPropia.setToolTipText("Daltonismo");
        btnOpPropia.setPreferredSize(new java.awt.Dimension(40, 35));
        btnOpPropia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpPropiaActionPerformed(evt);
            }
        });
        panelOperaciones.add(btnOpPropia);

        listaDisfunsionVisual.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Deuteranopía", "Protanopía", "Trianopía" }));
        panelOperaciones.add(listaDisfunsionVisual);

        btnOpPropia2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/filtroFrio.png"))); // NOI18N
        btnOpPropia2.setToolTipText("Freezer");
        btnOpPropia2.setPreferredSize(new java.awt.Dimension(40, 35));
        btnOpPropia2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpPropia2ActionPerformed(evt);
            }
        });
        panelOperaciones.add(btnOpPropia2);

        barraEdicion.add(panelOperaciones);

        panelColor.setBorder(javax.swing.BorderFactory.createTitledBorder("Color"));
        panelColor.setPreferredSize(new java.awt.Dimension(150, 80));
        panelColor.setLayout(new java.awt.BorderLayout());

        btnBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        btnBandas.setToolTipText("Bandas");
        btnBandas.setPreferredSize(new java.awt.Dimension(40, 35));
        btnBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBandasActionPerformed(evt);
            }
        });
        panelColor.add(btnBandas, java.awt.BorderLayout.CENTER);

        listaEspacioColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY", "YCbCr" }));
        listaEspacioColor.setToolTipText("Lista de espacios de color");
        listaEspacioColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaEspacioColorActionPerformed(evt);
            }
        });
        panelColor.add(listaEspacioColor, java.awt.BorderLayout.LINE_END);

        barraEdicion.add(panelColor);

        panelRotacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotación"));
        panelRotacion.setPreferredSize(new java.awt.Dimension(280, 80));

        sliderRotacion.setMaximum(360);
        sliderRotacion.setMinorTickSpacing(90);
        sliderRotacion.setPaintTicks(true);
        sliderRotacion.setToolTipText("Rotación libre");
        sliderRotacion.setValue(0);
        sliderRotacion.setPreferredSize(new java.awt.Dimension(100, 21));
        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });
        panelRotacion.add(sliderRotacion);

        btnRotacion90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        btnRotacion90.setToolTipText("Rotación 90");
        btnRotacion90.setFocusable(false);
        btnRotacion90.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRotacion90.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRotacion90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRotacion90ActionPerformed(evt);
            }
        });
        panelRotacion.add(btnRotacion90);

        btnRotacion180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        btnRotacion180.setToolTipText("Rotación 180");
        btnRotacion180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRotacion180ActionPerformed(evt);
            }
        });
        panelRotacion.add(btnRotacion180);

        btnRotacion270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        btnRotacion270.setToolTipText("Rotación 270");
        btnRotacion270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRotacion270ActionPerformed(evt);
            }
        });
        panelRotacion.add(btnRotacion270);

        barraEdicion.add(panelRotacion);

        panelEscalado.setBorder(javax.swing.BorderFactory.createTitledBorder("Escala"));
        panelEscalado.setPreferredSize(new java.awt.Dimension(120, 80));

        btnAumentarEscala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/baseline_zoom_in_black_18dp.png"))); // NOI18N
        btnAumentarEscala.setToolTipText("Aumentar");
        btnAumentarEscala.setPreferredSize(new java.awt.Dimension(40, 32));
        btnAumentarEscala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAumentarEscalaActionPerformed(evt);
            }
        });
        panelEscalado.add(btnAumentarEscala);

        btnDisminuirEscala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/baseline_zoom_out_black_18dp.png"))); // NOI18N
        btnDisminuirEscala.setToolTipText("Disminuir");
        btnDisminuirEscala.setPreferredSize(new java.awt.Dimension(40, 32));
        btnDisminuirEscala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisminuirEscalaActionPerformed(evt);
            }
        });
        panelEscalado.add(btnDisminuirEscala);

        barraEdicion.add(panelEscalado);

        panelUmbralización.setBorder(javax.swing.BorderFactory.createTitledBorder("Umbralización"));
        panelUmbralización.setPreferredSize(new java.awt.Dimension(120, 80));
        panelUmbralización.setLayout(new java.awt.BorderLayout());

        sliderUmbralización.setMaximum(255);
        sliderUmbralización.setToolTipText("Umbral");
        sliderUmbralización.setValue(128);
        sliderUmbralización.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderUmbralizaciónStateChanged(evt);
            }
        });
        sliderUmbralización.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderUmbralizaciónFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderUmbralizaciónFocusLost(evt);
            }
        });
        panelUmbralización.add(sliderUmbralización, java.awt.BorderLayout.CENTER);

        barraEdicion.add(panelUmbralización);

        panelBinarios.setBorder(javax.swing.BorderFactory.createTitledBorder("Binarias"));
        panelBinarios.setPreferredSize(new java.awt.Dimension(110, 80));

        btnSumaBinaria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        btnSumaBinaria.setToolTipText("Suma binaria");
        btnSumaBinaria.setPreferredSize(new java.awt.Dimension(35, 28));
        btnSumaBinaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSumaBinariaActionPerformed(evt);
            }
        });
        panelBinarios.add(btnSumaBinaria);

        btnRestaBinaria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        btnRestaBinaria.setToolTipText("Resta binaria");
        btnRestaBinaria.setPreferredSize(new java.awt.Dimension(35, 28));
        btnRestaBinaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestaBinariaActionPerformed(evt);
            }
        });
        panelBinarios.add(btnRestaBinaria);

        barraEdicion.add(panelBinarios);

        panelCentral.add(barraEdicion, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(panelCentral, java.awt.BorderLayout.CENTER);

        menuArchivo.setText("Archivo");

        menuArchivoNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        menuArchivoNuevo.setText("Nuevo");
        menuArchivoNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuArchivoNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(menuArchivoNuevo);

        menuArchivoAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        menuArchivoAbrir.setText("Abrir");
        menuArchivoAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuArchivoAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(menuArchivoAbrir);

        menuArchivoGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        menuArchivoGuardar.setText("Guardar");
        menuArchivoGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuArchivoGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(menuArchivoGuardar);

        barraMenu.add(menuArchivo);

        menuVer.setText("Ver");

        checkBarraEstado.setSelected(true);
        checkBarraEstado.setText("Barra de estado");
        checkBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBarraEstadoActionPerformed(evt);
            }
        });
        menuVer.add(checkBarraEstado);

        checkBarraFormas.setSelected(true);
        checkBarraFormas.setText("Barra de formas");
        checkBarraFormas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBarraFormasActionPerformed(evt);
            }
        });
        menuVer.add(checkBarraFormas);

        checkBarraEdicion.setSelected(true);
        checkBarraEdicion.setText("Barra de edición");
        checkBarraEdicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBarraEdicionActionPerformed(evt);
            }
        });
        menuVer.add(checkBarraEdicion);

        checkBarraLateral.setSelected(true);
        checkBarraLateral.setText("Barra lateral");
        checkBarraLateral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBarraLateralActionPerformed(evt);
            }
        });
        menuVer.add(checkBarraLateral);

        barraMenu.add(menuVer);

        menuImagen.setText("Imagen");

        menuImagenRedimensionar.setText("Redimensionar");
        menuImagenRedimensionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuImagenRedimensionarActionPerformed(evt);
            }
        });
        menuImagen.add(menuImagenRedimensionar);

        menuImagenDuplicar.setText("Duplicar");
        menuImagenDuplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuImagenDuplicarActionPerformed(evt);
            }
        });
        menuImagen.add(menuImagenDuplicar);

        barraMenu.add(menuImagen);

        menuAyuda.setText("Ayuda");

        menuAyudaAcercaDe.setText("Acerca de");
        menuAyudaAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAyudaAcercaDeActionPerformed(evt);
            }
        });
        menuAyuda.add(menuAyudaAcercaDe);

        barraMenu.add(menuAyuda);

        setJMenuBar(barraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inicializarBarraHerramientas(){
        this.btnPaleta1.setBackground(null);
        this.listaColores.setSelectedItem(Color.BLACK);
        this.btnPaleta2.setBackground(null);
        this.listaColores2.setSelectedItem(Color.BLACK);
        this.spinnerGrosor.setValue(1);
        this.listaTipoTrazos.setSelectedIndex(0);
        this.listaTiposRelleno.setSelectedIndex(0);
        this.btnAlisado.setSelected(false);
        this.btnTransparencia.setSelected(false);
        this.sliderTransparencia.setValue(0);
    }
    
    private void menuArchivoNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuArchivoNuevoActionPerformed
        VentanaInterna vi = new VentanaInterna(this);
        VentanaInterna hayVIdetras = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        if(!(hayVIdetras == null)){
            int desp = 50;
            vi.setLocation(hayVIdetras.getX() + desp, hayVIdetras.getY() + desp);
        }
        this.escritorio.add(vi);
        vi.setVisible(true);
        vi.setTitle("Nuevo lienzo");
        this.inicializarBarraHerramientas();
        vi.getLienzo2D().setHerrSelec(LienzoImagen2D.herramientasDibujo.LAPIZ);
        this.btnLapiz.setSelected(true);
        
        BufferedImage img = new BufferedImage(this.anchoVentana, this.altoVentana, BufferedImage.TYPE_INT_ARGB);
        img.createGraphics().setPaint(Color.white);
        img.createGraphics().fill(new Rectangle2D.Float(0.0F, 0.0F, img.getWidth(), img.getHeight()));
        vi.getLienzo2D().setClip(new Rectangle2D.Float(0.0F, 0.0F, img.getWidth(), img.getHeight()));
        vi.getLienzo2D().setImage(img);
    }//GEN-LAST:event_menuArchivoNuevoActionPerformed

    private void menuArchivoAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuArchivoAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        dlg.setDialogTitle("Abrir fichero");
        
        FileNameExtensionFilter filtroImagen = new FileNameExtensionFilter("Imagen [JPG, PNG, JPEG, GIF]", new String[] { "jpg", "png", "jpeg", "gif" });
        FileNameExtensionFilter filtroAudio = new FileNameExtensionFilter("Audio [AU, WAV]", new String[] { "au", "wav" });
        FileNameExtensionFilter filtroVideo = new FileNameExtensionFilter("Video [AVI, MP4, MKV]", new String[] { "avi", "mp4", "mpg", "mp3" });
        
        dlg.setFileFilter(filtroImagen);
        dlg.setFileFilter(filtroAudio);
        dlg.setFileFilter(filtroVideo);
        dlg.setMultiSelectionEnabled(false);
        
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            File f = dlg.getSelectedFile();
            String nombreFichero = f.getName();
            
            if(nombreFichero.endsWith("jpg") || nombreFichero.endsWith("png") || nombreFichero.endsWith("jpeg") || nombreFichero.endsWith("gif")
                    || nombreFichero.endsWith("JPG") || nombreFichero.endsWith("PNG") || nombreFichero.endsWith("JPEG") || nombreFichero.endsWith("GIF"))
                try {
                    imgSource = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna(this);
                    vi.getLienzo2D().setImage(imgSource);
                    vi.getLienzo2D().setClip(new Rectangle2D.Float(0.0F, 0.0F, imgSource.getWidth(), imgSource.getHeight()));
                    this.bandas = false;
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                }catch (Exception ex) {
                    System.err.println("Error al leer la imagen");
                }   
            
            if(nombreFichero.endsWith("au") || nombreFichero.endsWith("wav") || nombreFichero.endsWith("AU") || nombreFichero.endsWith("WAV")){
                try {
                    File tmp = new File(f.getAbsolutePath()){
                      @Override
                      public String toString(){
                          return this.getName();
                      }
                    };

                    this.listaReproduccionSonido.addItem(tmp);
                }catch (Exception ex) {
                    System.err.println("Error al abrir el audio");
                }
            }
            if(nombreFichero.endsWith("avi") || nombreFichero.endsWith("mp4") || nombreFichero.endsWith("mpg") || nombreFichero.endsWith("mp3")
                    || nombreFichero.endsWith("AVI") || nombreFichero.endsWith("MP4") || nombreFichero.endsWith("MPG") || nombreFichero.endsWith("MP3")){
                try {
                    File tmp = new File(f.getAbsolutePath()){
                      @Override
                      public String toString(){
                          return this.getName();
                      }
                    };
                    this.vVLC = VentanaInternaVLCPlayer.getInstance(f);
                    this.escritorio.add(vVLC);
                    vVLC.setTitle(f.getName());
                    vVLC.setVisible(true);
                    this.listaReproduccionSonido.addItem(tmp);
                }catch (Exception ex) {
                    System.err.println("Error al abrir el video");
                }   
            }
        }
    }//GEN-LAST:event_menuArchivoAbrirActionPerformed

    private void menuArchivoGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuArchivoGuardarActionPerformed
        VentanaInterna vi=(VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            JFileChooser dlg = new JFileChooser();
            dlg.setDialogTitle("Guardar como...");
            FileNameExtensionFilter filtroImagen = new FileNameExtensionFilter("Imagen [JPG, PNG, JPEG, GIF]", new String[] { "jpg", "png", "jpeg", "gif" });
            dlg.setFileFilter(filtroImagen);

            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedImage img = vi.getLienzo2D().getImage(true);
                    if (img != null) {
                    File f = dlg.getSelectedFile();
                    if(f.getName().endsWith("jpg"))
                        ImageIO.write(img, "jpg", f);
                    if(f.getName().endsWith("png"))
                        ImageIO.write(img, "png", f);
                    if(f.getName().endsWith("gif"))
                        ImageIO.write(img, "gif", f);
                    vi.setTitle(f.getName());
                    JOptionPane.showMessageDialog(null, "Archivo guardado");
                    }
                }catch (Exception ex) {
                    System.err.println("Error al guardar la imagen");
                }
            }   
        }
    }//GEN-LAST:event_menuArchivoGuardarActionPerformed

    private void checkBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBarraEstadoActionPerformed
        this.txtBarraEstado.setVisible(this.checkBarraEstado.isSelected());
    }//GEN-LAST:event_checkBarraEstadoActionPerformed

    private void btnLapizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLapizActionPerformed
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if(vi != null)
            vi.getLienzo2D().setHerrSelec(LienzoImagen2D.herramientasDibujo.LAPIZ);
        this.txtBarraEstado.setText("Lápiz");
    }//GEN-LAST:event_btnLapizActionPerformed

    private void btnLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLineaActionPerformed
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if(vi != null)
            vi.getLienzo2D().setHerrSelec(LienzoImagen2D.herramientasDibujo.LINEA);
        this.txtBarraEstado.setText("Línea");
    }//GEN-LAST:event_btnLineaActionPerformed

    private void btnRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRectanguloActionPerformed
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if(vi != null){
            vi.getLienzo2D().setHerrSelec(LienzoImagen2D.herramientasDibujo.RECTANGULO);
            vi.getLienzo2D().setRecRedondeado(false);
        }
        this.txtBarraEstado.setText("Rectángulo");
    }//GEN-LAST:event_btnRectanguloActionPerformed

    private void btnElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElipseActionPerformed
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if(vi != null)
            vi.getLienzo2D().setHerrSelec(LienzoImagen2D.herramientasDibujo.ELIPSE);
        this.txtBarraEstado.setText("Elipse");
    }//GEN-LAST:event_btnElipseActionPerformed

    private void checkBarraFormasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBarraFormasActionPerformed
        this.barraHerramientas.setVisible(this.checkBarraFormas.isSelected());
    }//GEN-LAST:event_checkBarraFormasActionPerformed

    private void checkBarraEdicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBarraEdicionActionPerformed
        this.barraEdicion.setVisible(this.checkBarraEdicion.isSelected());
    }//GEN-LAST:event_checkBarraEdicionActionPerformed

    private void btnBHNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBHNuevoActionPerformed
        this.menuArchivoNuevoActionPerformed(evt);
    }//GEN-LAST:event_btnBHNuevoActionPerformed

    private void btnBHAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBHAbrirActionPerformed
        this.menuArchivoAbrirActionPerformed(evt);
    }//GEN-LAST:event_btnBHAbrirActionPerformed

    private void btnBHGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBHGuardarActionPerformed
        this.menuArchivoGuardarActionPerformed(evt);
    }//GEN-LAST:event_btnBHGuardarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        this.txtBarraEstado.setText("Editando...");
    }//GEN-LAST:event_btnEditarActionPerformed

    private void spinnerGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerGrosorStateChanged
        if(this.btnEditar.isSelected() && this.shapeSelec != null)
            this.shapeSelec.setGrosor((int) this.spinnerGrosor.getValue());
        else{
            VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo2D().setNivelGrosor((int) this.spinnerGrosor.getValue());
            }
        }
        this.repaint();
    }//GEN-LAST:event_spinnerGrosorStateChanged

    private void btnTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransparenciaActionPerformed
        if(this.btnEditar.isSelected() && this.shapeSelec != null)
            this.shapeSelec.setTransparencia(this.btnTransparencia.isSelected());
        else{
            VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo2D().setTransparencia(this.btnTransparencia.isSelected());
            }
        }
        this.repaint();
    }//GEN-LAST:event_btnTransparenciaActionPerformed

    private void btnAlisadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlisadoActionPerformed
        if(this.btnEditar.isSelected() && this.shapeSelec != null)
            this.shapeSelec.setAlisar(this.btnAlisado.isSelected());
        else{
            VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo2D().setAlisar(this.btnAlisado.isSelected());
            }
        }
        this.repaint(); 
    }//GEN-LAST:event_btnAlisadoActionPerformed

    private void listaColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaColoresActionPerformed
        if(this.btnEditar.isSelected() && this.shapeSelec != null)
            this.shapeSelec.setColorTrazo((Color) this.listaColores.getSelectedItem());
        else{
            VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo2D().setColorTrazo((Color) this.listaColores.getSelectedItem());
            }
        }
        this.repaint(); 
    }//GEN-LAST:event_listaColoresActionPerformed

    private void sliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrilloStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            if(this.imgSource!=null){
                try{
                    if (this.imgSource.getColorModel().hasAlpha()){
                        float[] factors = {1.0f, 1.0f, 1.0f, 1.0f};
                        float nivelBrillo = this.sliderBrillo.getValue();
                        float[] offsets = {nivelBrillo, nivelBrillo, nivelBrillo, 0.0f};
                        RescaleOp ropAlpha = new RescaleOp(factors, offsets, null);
                        ropAlpha.filter(this.imgSource, vi.getLienzo2D().getImage());
                    }else{
                        RescaleOp rop = new RescaleOp(1.0F, this.sliderBrillo.getValue(), null);
                        rop.filter(this.imgSource, vi.getLienzo2D().getImage());
                    }
                    if(this.bandas)
                        this.escritorio.repaint();
                    else
                        vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderBrilloStateChanged

    private void sliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusGained
        VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
        if(vi!=null){
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            this.imgSource = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_sliderBrilloFocusGained

    private void sliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusLost
        this.imgSource = null;
        this.sliderBrillo.setValue(0);
    }//GEN-LAST:event_sliderBrilloFocusLost

    private void listaFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaFiltrosActionPerformed
        VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
        if(vi!=null){    
            this.imgSource = vi.getLienzo2D().getImage();
            if(this.imgSource != null){
                if(this.listaFiltros.getSelectedIndex() < 5){
                    try {
                        Kernel k = KernelProducer.createKernel(this.listaFiltros.getSelectedIndex());  
                        ConvolveOp cop = new ConvolveOp(k, 1, null);
                        BufferedImage imgOut = cop.filter(this.imgSource, null);
                        vi.getLienzo2D().setImage(imgOut);
                        vi.getLienzo2D().repaint();
                    } catch (Exception e) {
                        System.out.println("Error");
                    }
                }else if(this.listaFiltros.getSelectedIndex() == 5){
                    try {
                        Kernel k = new Kernel(3, 3, filtroNorte); 
                        ConvolveOp cop = new ConvolveOp(k);
                        BufferedImage imgOut = cop.filter(this.imgSource, null);
                        vi.getLienzo2D().setImage(imgOut);
                        vi.getLienzo2D().repaint();
                    } catch (Exception e) {
                        System.out.println("Error");
                    }
                }else if(this.listaFiltros.getSelectedIndex() == 6){
                    try {
                        Kernel k = new Kernel(3, 3, filtroEste); 
                        ConvolveOp cop = new ConvolveOp(k);
                        BufferedImage imgOut = cop.filter(this.imgSource, null);
                        vi.getLienzo2D().setImage(imgOut);
                        vi.getLienzo2D().repaint();
                    } catch (Exception e) {
                        System.out.println("Error");
                    } 
                }else{
                   try {
                        Kernel k = new Kernel(3, 3, filtroGauss); 
                        ConvolveOp cop = new ConvolveOp(k);
                        BufferedImage imgOut = cop.filter(this.imgSource, null);
                        vi.getLienzo2D().setImage(imgOut);
                        vi.getLienzo2D().repaint();
                    } catch (Exception e) {
                        System.out.println("Error");
                    }  
                }
            }
        }
    }//GEN-LAST:event_listaFiltrosActionPerformed

    private void btnContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContrasteActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo2D().getImage();
            if(imgSource!=null){
                try{
                int type = LookupTableProducer.TYPE_SFUNCION;
                LookupTable lt = LookupTableProducer.createLookupTable(type);
                LookupOp lop = new LookupOp(lt, null);
                // Imagen origen y destino iguales
                lop.filter( imgSource , imgSource);
                vi.repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }        
    }//GEN-LAST:event_btnContrasteActionPerformed

    private void btnIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIluminarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo2D().getImage();
            if(imgSource!=null){
                try{
                int type = LookupTableProducer.TYPE_LOGARITHM;
                LookupTable lt = LookupTableProducer.createLookupTable(type);
                LookupOp lop = new LookupOp(lt, null);
                // Imagen origen y destino iguales
                lop.filter( imgSource , imgSource);
                vi.repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }          
    }//GEN-LAST:event_btnIluminarActionPerformed

    private void btnOscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOscurecerActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo2D().getImage();
            if(imgSource!=null){
                try{
                int type = LookupTableProducer.TYPE_POWER;
                LookupTable lt = LookupTableProducer.createLookupTable(type);
                LookupOp lop = new LookupOp(lt, null);
                // Imagen origen y destino iguales
                lop.filter( imgSource , imgSource);
                vi.repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }  
    }//GEN-LAST:event_btnOscurecerActionPerformed

    private void rotarImagen(double radians, BufferedImage imgSource){
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            if(imgSource == null)
                imgSource = vi.getLienzo2D().getImage();
            if(imgSource != null){
                try{
                    AffineTransform at = AffineTransform.getRotateInstance(radians,imgSource.getWidth()/2, imgSource.getHeight()/2);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgDest = atop.filter(imgSource, null);
                    vi.getLienzo2D().setImage(imgDest);
                    vi.getLienzo2D().repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        } 
    }
    
    private void btnRotacion90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRotacion90ActionPerformed
        this.rotarImagen(Math.toRadians(90.0), null);
    }//GEN-LAST:event_btnRotacion90ActionPerformed

    private void btnRotacion180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRotacion180ActionPerformed
        this.rotarImagen(Math.toRadians(180.0), null);
    }//GEN-LAST:event_btnRotacion180ActionPerformed

    private void btnRotacion270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRotacion270ActionPerformed
        this.rotarImagen(Math.toRadians(270.0), null);
    }//GEN-LAST:event_btnRotacion270ActionPerformed

    private LookupTable funcionSeno(double w){
        double K = 255.0;
        byte f[] = new byte[256];

        for(int i=0; i<256; i++){
            f[i] = (byte)(K * Math.abs(Math.sin(Math.toRadians(i * w))));
        }
        ByteLookupTable blt = new ByteLookupTable(0, f);
  
        return blt;
    }
    
    private void btnSenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSenoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.getLienzo2D().getImage();
            if(imgSource!=null){
                try{
                    LookupOp lop = new LookupOp(this.funcionSeno(180.0/255.0), null);
                    BufferedImage imgDest = lop.filter( imgSource , imgSource);
                    vi.getLienzo2D().setImage(imgDest);
                    vi.getLienzo2D().repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }  
    }//GEN-LAST:event_btnSenoActionPerformed

    private void escalado(double escala, BufferedImage imgSource){
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            if(imgSource == null)
                imgSource = vi.getLienzo2D().getImage();
            if(imgSource!=null){
                try{
                    AffineTransform at = AffineTransform.getScaleInstance(escala, escala);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgDest = atop.filter(imgSource, null);
                    vi.getLienzo2D().setImage(imgDest);
                    vi.getLienzo2D().repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        } 
    } 
    
    private void btnAumentarEscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAumentarEscalaActionPerformed
        this.escalado(1.25, null);
    }//GEN-LAST:event_btnAumentarEscalaActionPerformed

    private void btnDisminuirEscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisminuirEscalaActionPerformed
        this.escalado(0.75, null);
    }//GEN-LAST:event_btnDisminuirEscalaActionPerformed

    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        this.rotarImagen(Math.toRadians(this.sliderRotacion.getValue()), this.imgSource);
    }//GEN-LAST:event_sliderRotacionStateChanged

    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if(vi != null)
            this.imgSource = vi.getLienzo2D().getImage();
    }//GEN-LAST:event_sliderRotacionFocusGained

    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        this.imgSource = null;
        this.sliderRotacion.setValue(0);
    }//GEN-LAST:event_sliderRotacionFocusLost

    private void btnDuplicarVentanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDuplicarVentanaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null){
            BufferedImage imgDuplicada = vi.getLienzo2D().getImage();
            ColorModel cm = imgDuplicada.getColorModel();
            boolean alpha = cm.isAlphaPremultiplied();
            WritableRaster raster = imgDuplicada.copyData(null);
            BufferedImage imgOut = new BufferedImage(cm, raster, alpha, null);
            
            if(imgOut != null){
                vi = new VentanaInterna(this);
                LienzoImagen2D lienzo = vi.getLienzo2D();
                lienzo.setImage(imgOut);
                VentanaInterna hayVIdetras = (VentanaInterna)this.escritorio.getSelectedFrame();
                if (hayVIdetras != null) {
                    int desp = 50;
                    vi.setLocation(hayVIdetras.getX() + desp, hayVIdetras.getY() + desp);
                }

                this.escritorio.add(vi);
                vi.setTitle("Ventana duplicada");
                vi.setVisible(true);
            }
        }
    }//GEN-LAST:event_btnDuplicarVentanaActionPerformed

       
    private void btnBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBandasActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        String tituloVentana = vi.getTitle();
        if (vi != null){
            imgSource = vi.getLienzo2D().getImage();
            if(imgSource!=null){
                try{
                    //Creamos el modelo de color de la nueva imagen basado en un espcio de color GRAY
                    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    ComponentColorModel cm = new ComponentColorModel(cs, false, false, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
 
                    for(int iBanda=0; iBanda<imgSource.getRaster().getNumBands(); iBanda++){
                        //Creamos el nuevo raster a partir del raster de la imagen original
                        int bandList[] = {iBanda};
                        WritableRaster bandRaster = (WritableRaster)imgSource.getRaster().createWritableChild(0, 0,  imgSource.getWidth(), imgSource.getHeight(), 0, 0, bandList);

                        //Creamos una nueva imagen que contiene como raster el correspondiente a la banda
                        BufferedImage imgBanda = new BufferedImage(cm, bandRaster, false, null);

                        vi = new VentanaInterna(this);
                        LienzoImagen2D lienzo = vi.getLienzo2D();
                        lienzo.setImage(imgBanda);
                        VentanaInterna hayVIdetras = (VentanaInterna)this.escritorio.getSelectedFrame();
                        
                        if (hayVIdetras != null) {
                            int desp = 50;
                            vi.setLocation(hayVIdetras.getX() + desp, hayVIdetras.getY() + desp);
                        }
                        
                        this.bandas = true;
                        this.escritorio.add(vi);
                        vi.setTitle(tituloVentana + " - Banda " + iBanda);
                        vi.setVisible(true);
                    }
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
    }      
        
    }//GEN-LAST:event_btnBandasActionPerformed

    private void listaEspacioColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaEspacioColorActionPerformed
        VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
        if(vi!=null){    
            imgSource = vi.getLienzo2D().getImage();
            if(imgSource != null){
                BufferedImage imgOut;
                VentanaInterna vi2 = new VentanaInterna(this);
                LienzoImagen2D lienzo = vi2.getLienzo2D();
                String tituloVI = vi.getTitle();
                String tituloVentana = "";
                
                switch (this.listaEspacioColor.getSelectedIndex()) {
                    case 0:
                        try {
                            //Definir comprobación
                            ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                            ColorConvertOp cop = new ColorConvertOp(cs, null);
                            imgOut = cop.filter(imgSource, null);
                            lienzo.setImage(imgOut);
                            vi2.getLienzo2D().setImage(imgOut);
                            vi2.getLienzo2D().repaint();
                            tituloVentana = "[sRGB]";
                            
                        } catch (Exception e) {
                            System.out.println("Error");
                        }   break;
                    case 1:
                        try {
                            if (imgSource.getColorModel().getColorSpace().isCS_sRGB()) {
                                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                                ColorConvertOp cop = new ColorConvertOp(cs, null);
                                imgOut = cop.filter(imgSource, null);
                                lienzo.setImage(imgOut);
                                vi2.getLienzo2D().setImage(imgOut);
                                vi2.getLienzo2D().repaint();
                                tituloVentana = "[YCC]";
                            }
                        } catch (Exception e) {
                            System.out.println("Error");
                        }   break;
                    case 2:
                        try {
                            //Definir comprobación
                            ColorSpace cs = new sm.image.color.GreyColorSpace();
                            ColorConvertOp cop = new ColorConvertOp(cs, null);
                            imgOut = cop.filter(imgSource, null);
                            lienzo.setImage(imgOut);
                            vi2.getLienzo2D().setImage(imgOut);
                            vi2.getLienzo2D().repaint();
                            tituloVentana = "[GREY]";

                        } catch (Exception e) {
                            System.out.println("Error");
                        }   break;
                    case 3:
                        try {
                            //Definir comprobación
                            ColorSpace cs = new sm.image.color.YCbCrColorSpace();
                            ColorConvertOp cop = new ColorConvertOp(cs, null);
                            imgOut = cop.filter(imgSource, null);
                            lienzo.setImage(imgOut);
                            vi2.getLienzo2D().setImage(imgOut);
                            vi2.getLienzo2D().repaint();
                            tituloVentana = "[YCbCr]";

                        } catch (Exception e) {
                            System.out.println("Error");
                        }   break;
                }

                VentanaInterna hayVIdetras = (VentanaInterna)this.escritorio.getSelectedFrame();
                       
                if (hayVIdetras != null) {
                    int desp = 50;
                    vi2.setLocation(hayVIdetras.getX() + desp, hayVIdetras.getY() + desp);
                }
                        
                this.escritorio.add(vi2);
                vi2.setTitle(tituloVI + " " + tituloVentana);
                vi2.setVisible(true);
            }
        }
    }//GEN-LAST:event_listaEspacioColorActionPerformed

    private void btnTintadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTintadoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null){
            imgSource = vi.getLienzo2D().getImage();
            if(imgSource!=null){
                try{
                    TintOp tintado = new sm.image.TintOp(vi.getLienzo2D().getColorTrazo(), 0.5f);
                    tintado.filter( imgSource , imgSource);
                    vi.repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }          
    }//GEN-LAST:event_btnTintadoActionPerformed

    private void btnEcualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEcualizarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null){
            imgSource = vi.getLienzo2D().getImage();
            if(imgSource!=null){
                try{
                    EqualizationOp ecualizacion = new sm.image.EqualizationOp();
                    ecualizacion.filter( imgSource , imgSource);
                    vi.repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }          
    }//GEN-LAST:event_btnEcualizarActionPerformed

    private void btnSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSepiaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null){
            imgSource = vi.getLienzo2D().getImage();
            if(imgSource!=null){
                try{
                    SepiaOp sepia = new sm.ffm.imagen.SepiaOp();
                    sepia.filter( imgSource , imgSource);
                    vi.repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }   
    }//GEN-LAST:event_btnSepiaActionPerformed

    private void sliderUmbralizaciónStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderUmbralizaciónStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            if(imgSource == null)
                imgSource = vi.getLienzo2D().getImage();
            if(imgSource != null){
                try{
                    UmbralizacionOp umbralizacion = new sm.ffm.imagen.UmbralizacionOp(this.sliderUmbralización.getValue());
                    BufferedImage imgDest = umbralizacion.filter(imgSource, null);
                    vi.getLienzo2D().setImage(imgDest);
                    vi.getLienzo2D().repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }       
    }//GEN-LAST:event_sliderUmbralizaciónStateChanged

    private void sliderUmbralizaciónFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderUmbralizaciónFocusGained
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if(vi != null)
            this.imgSource = vi.getLienzo2D().getImage();
    }//GEN-LAST:event_sliderUmbralizaciónFocusGained

    private void sliderUmbralizaciónFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderUmbralizaciónFocusLost
       this.imgSource = null;
       this.sliderUmbralización.setValue(128);
    }//GEN-LAST:event_sliderUmbralizaciónFocusLost

    private void btnRestaBinariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestaBinariaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            VentanaInterna viNext = (VentanaInterna) escritorio.selectFrame(false);
            if (viNext != null) {
                BufferedImage imgRight = vi.getLienzo2D().getImage();
                BufferedImage imgLeft = viNext.getLienzo2D().getImage();
                if (imgRight != null && imgLeft != null) {
                    try {
                        SubtractionOp op = new SubtractionOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        vi = new VentanaInterna(this);
                        vi.getLienzo2D().setImage(imgdest);
                        this.escritorio.add(vi);
                        vi.setTitle("Resta binaria");
                        vi.setVisible(true);
                    } catch (IllegalArgumentException e) {
                        System.err.println("Error: "+e.getLocalizedMessage());
                    }
                }
            }
        }        
    }//GEN-LAST:event_btnRestaBinariaActionPerformed
    
    private void btnSumaBinariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSumaBinariaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            VentanaInterna viNext = (VentanaInterna) escritorio.selectFrame(false);
            if (viNext != null) {
                BufferedImage imgRight = vi.getLienzo2D().getImage();
                BufferedImage imgLeft = viNext.getLienzo2D().getImage();
                if (imgRight != null && imgLeft != null) {
                    try {
                        BlendOp op = new BlendOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        vi = new VentanaInterna(this);
                        vi.getLienzo2D().setImage(imgdest);
                        this.escritorio.add(vi);
                        vi.setTitle("Suma binaria");
                        vi.setVisible(true);
                    } catch (IllegalArgumentException e) {
                        System.err.println("Error: "+e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_btnSumaBinariaActionPerformed

    private void btnEditarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_btnEditarStateChanged
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if(vi != null){
           vi.getLienzo2D().setEditar(this.btnEditar.isSelected());
        }
        this.repaint(); 
    }//GEN-LAST:event_btnEditarStateChanged

    private void btnPlaySonidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaySonidoActionPerformed
        if(this.listaReproduccionSonido != null){
            File f = (File) this.listaReproduccionSonido.getSelectedItem();
            VentanaInternaVLCPlayer vVLC = (VentanaInternaVLCPlayer) this.escritorio.getSelectedFrame();
            if(f != null){
                if(vVLC == null){
                    player = new SMAudioClipPlayer(f);
                    if(player != null){
                        player.play();
                    }
                }else{
                    vVLC.play();
                }
            }
        }
    }//GEN-LAST:event_btnPlaySonidoActionPerformed

    private void btnStopSonidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopSonidoActionPerformed
        if(this.listaReproduccionSonido != null){
            File f = (File) this.listaReproduccionSonido.getSelectedItem();
            this.vVLC = (VentanaInternaVLCPlayer) this.escritorio.getSelectedFrame();

            if(f != null){
                if(vVLC == null){
                    if(player != null){
                        player.stop();
                    }
                }else{
                    vVLC.stop();
                }
            }
        }        
    }//GEN-LAST:event_btnStopSonidoActionPerformed

    private void btnGrabarSonidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrabarSonidoActionPerformed
        if(this.btnGrabarSonido.isSelected()){
            JFileChooser dlg = new JFileChooser();
            dlg.setDialogTitle("Guardar como...");
            FileNameExtensionFilter filtroAudio = new FileNameExtensionFilter("Audio [AU, WAV]", new String[] { "au", "wav" });
            dlg.setFileFilter(filtroAudio);
            
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                grabacion = dlg.getSelectedFile();
                recorder = new SMSoundRecorder(grabacion);
                if(grabacion != null){
                    if(recorder != null)
                        recorder.record();
                }
            }
        }
        else if(!this.btnGrabarSonido.isSelected()){
            if(recorder != null){
                recorder.stop();
                File f = new File(this.grabacion.getAbsolutePath()){
                  @Override
                  public String toString(){
                      return this.getName();
                  }
                };
                this.listaReproduccionSonido.addItem(f);
                JOptionPane.showMessageDialog(null, "Audio guardado");
            }
        }
         
    }//GEN-LAST:event_btnGrabarSonidoActionPerformed

    private void btnCamaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCamaraActionPerformed
        vIC = VentanaInternaCamara.getInstance();

        this.escritorio.add(vIC);
        vIC.setVisible(true);
        vIC.setTitle("WebCam");       
    }//GEN-LAST:event_btnCamaraActionPerformed

    private void btnCapturaWebcamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCapturaWebcamActionPerformed
        if(vIC != null){
            BufferedImage imgOutCam = vIC.getImage();
            VentanaInterna vi = new VentanaInterna(this);
            vi.setLocation(25, 25);
            vi.getLienzo2D().setImage(imgOutCam);
            this.escritorio.add(vi);
            vi.setTitle("Captura WebCam");
            vi.setVisible(true);
        }else if(vVLC != null){
            BufferedImage imgOutVideo = vVLC.getImage();
            VentanaInterna vi = new VentanaInterna(this);
            vi.setLocation(25, 25);
            vi.getLienzo2D().setImage(imgOutVideo);
            this.escritorio.add(vi);
            vi.setTitle("Captura Video");
            vi.setVisible(true);            
        }
    }//GEN-LAST:event_btnCapturaWebcamActionPerformed

    private void actualizarBarraAtributos(MyShape figura){
        this.spinnerGrosor.setValue(figura.getGrosor());
        this.listaColores.setSelectedItem(figura.getColorTrazo());
        this.btnPaleta1.setBackground(figura.getColorTrazo());
        this.btnPaleta2.setBackground(null);
        
        if(figura.getTazoPunteado())
            this.listaTipoTrazos.setSelectedIndex(1);
        else
            this.listaTipoTrazos.setSelectedIndex(0);
        
        if(!(figura instanceof MyShapeLinea)){
            if(((MyRelleno)figura).getRelleno()){
                this.listaColores2.setSelectedItem(((MyRelleno)figura).getColorRelleno());
                this.btnPaleta2.setBackground(((MyRelleno)figura).getColorRelleno());
            }
            if(((MyRelleno)figura).getDegradadoV()){
                this.listaColores2.setSelectedItem(((MyRelleno)figura).getColorDegFondo());
                this.btnPaleta2.setBackground(((MyRelleno)figura).getColorDegFondo());
            }
            if(((MyRelleno)figura).getDegradadoH()){
                this.listaColores2.setSelectedItem(((MyRelleno)figura).getColorDegFondo());
                this.btnPaleta2.setBackground(((MyRelleno)figura).getColorDegFondo());
            } 
            if(((MyRelleno)figura).getDegradadoD()){
                this.listaColores2.setSelectedItem(((MyRelleno)figura).getColorDegFondo());
                this.btnPaleta2.setBackground(((MyRelleno)figura).getColorDegFondo());
            } 
        }
        
        this.btnAlisado.setSelected(figura.getAlisar());
        
        this.btnTransparencia.setSelected(figura.getTransparencia());
        this.sliderTransparencia.setValue((int) figura.getNivelTransparencia());
    }
    
    private void listaFigurasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaFigurasActionPerformed
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if(vi != null){
            if(vi.getLienzo2D().getEditar()){
                this.shapeSelec = (MyShape) listaFiguras.getSelectedItem();
                vi.getLienzo2D().dibujarMarcoFigura(shapeSelec);

                this.actualizarBarraAtributos(shapeSelec);
                this.txtFormateadoX.setText(Integer.toString(shapeSelec.getBounds().x));
                this.txtFormateadoY.setText(Integer.toString(shapeSelec.getBounds().y));
            }
        } 
        this.repaint();
    }//GEN-LAST:event_listaFigurasActionPerformed

    private void listaColores2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaColores2ActionPerformed
        if(this.btnEditar.isSelected() && this.shapeSelec != null){
            ((MyRelleno)this.shapeSelec).setColorRelleno((Color) this.listaColores2.getSelectedItem());  
        }else{
            VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo2D().setColorRelleno((Color) this.listaColores2.getSelectedItem());
            }
        }
        this.repaint();
    }//GEN-LAST:event_listaColores2ActionPerformed

    private void btnPaleta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaleta1ActionPerformed
        Color color = JColorChooser.showDialog(getContentPane(), "Elige un color", Color.BLACK);
    
        if(this.btnEditar.isSelected() && this.shapeSelec != null){
            this.shapeSelec.setColorTrazo(color);  
            this.btnPaleta1.setBackground(color);
        }else{
            VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo2D().setColorTrazo(color);
                this.btnPaleta1.setBackground(color);
            }
        }
        this.repaint();
    }//GEN-LAST:event_btnPaleta1ActionPerformed

    private void btnPaleta2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaleta2ActionPerformed
        Color color = JColorChooser.showDialog(getContentPane(), "Elige un color", Color.BLACK);
        
        if(this.btnEditar.isSelected() && this.shapeSelec != null){
            ((MyRelleno)this.shapeSelec).setColorRelleno(color);  
            this.btnPaleta2.setBackground(color);
        }else{
            VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo2D().setColorRelleno(color);
                this.btnPaleta2.setBackground(color);
            }
        }
        this.repaint();
    }//GEN-LAST:event_btnPaleta2ActionPerformed

    private void listaTipoTrazosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaTipoTrazosActionPerformed
        if(this.btnEditar.isSelected() && this.shapeSelec != null){
            if(this.listaTipoTrazos.getSelectedIndex() == 0)
                this.shapeSelec.setTrazoPunteado(false);
            else
                this.shapeSelec.setTrazoPunteado(true);
        }else{
            VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
            if(vi != null){
                if(this.listaTipoTrazos.getSelectedIndex() == 0)
                    vi.getLienzo2D().setTrazo(false);
                else
                    vi.getLienzo2D().setTrazo(true);
            }
        }
        this.repaint();
    }//GEN-LAST:event_listaTipoTrazosActionPerformed

    private void listaTiposRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaTiposRellenoActionPerformed
        if (this.btnEditar.isSelected() && this.shapeSelec != null && !(this.shapeSelec instanceof MyShapeLinea)) {
            switch (this.listaTiposRelleno.getSelectedIndex()) {
                case 0: //Sin relleno
                    ((MyRelleno)this.shapeSelec).setRelleno(false);
                    ((MyRelleno)this.shapeSelec).setDegradadoV(false);
                    ((MyRelleno)this.shapeSelec).setDegradadoH(false);
                    ((MyRelleno)this.shapeSelec).setDegradadoD(false);
                    break;   
                case 1: // Relleno liso
                    ((MyRelleno)this.shapeSelec).setRelleno(true);
                    break;
                case 2: // Gradiente vertical
                    {
                        JOptionPane.showMessageDialog(null, "Selecciona el color de frente y el color de fondo de la paleta de colores.");
                        ((MyRelleno)this.shapeSelec).setRelleno(false);
                        ((MyRelleno)this.shapeSelec).setDegradadoH(false);
                        ((MyRelleno)this.shapeSelec).setDegradadoV(true);
                        ((MyRelleno)this.shapeSelec).setDegradadoD(false);
                        this.btnPaleta1ActionPerformed(evt);
                        Color colorFrente = this.btnPaleta1.getBackground();
                        ((MyRelleno)this.shapeSelec).setColorDegFrente(colorFrente);
                        this.btnPaleta2ActionPerformed(evt);
                        Color colorFondo = this.btnPaleta2.getBackground();
                        ((MyRelleno)this.shapeSelec).setColorDegFondo(colorFondo);
                        break;
                    }
                case 3: // Gradiente horizontal
                    {
                        JOptionPane.showMessageDialog(null, "Selecciona el color de frente y el color de fondo de la paleta de colores.");
                        ((MyRelleno)this.shapeSelec).setRelleno(false);
                        ((MyRelleno)this.shapeSelec).setDegradadoV(false);
                        ((MyRelleno)this.shapeSelec).setDegradadoH(true);
                        ((MyRelleno)this.shapeSelec).setDegradadoD(false);
                        this.btnPaleta1ActionPerformed(evt);
                        Color colorFrente = this.btnPaleta1.getBackground();
                        ((MyRelleno)this.shapeSelec).setColorDegFrente(colorFrente);
                        this.btnPaleta2ActionPerformed(evt);
                        Color colorFondo = this.btnPaleta2.getBackground();
                        ((MyRelleno)this.shapeSelec).setColorDegFondo(colorFondo);
                        break;
                    }
                case 4: // Gradiente diagonal
                    {
                        JOptionPane.showMessageDialog(null, "Selecciona el color de frente y el color de fondo de la paleta de colores.");
                        ((MyRelleno)this.shapeSelec).setRelleno(false);
                        ((MyRelleno)this.shapeSelec).setDegradadoV(false);
                        ((MyRelleno)this.shapeSelec).setDegradadoH(false);
                        ((MyRelleno)this.shapeSelec).setDegradadoD(true);
                        this.btnPaleta1ActionPerformed(evt);
                        Color colorFrente = this.btnPaleta1.getBackground();
                       ((MyRelleno)this.shapeSelec).setColorDegFrente(colorFrente);
                        this.btnPaleta2ActionPerformed(evt);
                        Color colorFondo = this.btnPaleta2.getBackground();
                        ((MyRelleno)this.shapeSelec).setColorDegFondo(colorFondo);
                        break;
                    }
                default:
                    break;
            }
        }
        else{
            VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
            if(vi != null){
                switch (this.listaTiposRelleno.getSelectedIndex()) {
                    case 0: //Sin relleno
                        vi.getLienzo2D().setRelleno(false);
                        vi.getLienzo2D().setDegradadoV(false);
                        vi.getLienzo2D().setDegradadoH(false);
                        vi.getLienzo2D().setDegradadoD(false);
                        break;
                    case 1: // Relleno liso
                        vi.getLienzo2D().setRelleno(true);
                        break;
                    case 2: // Gradiente vertical
                        {
                            JOptionPane.showMessageDialog(null, "Selecciona el color de frente y el color de fondo de la paleta de colores.");
                            vi.getLienzo2D().setRelleno(false);
                            vi.getLienzo2D().setDegradadoH(false);
                            vi.getLienzo2D().setDegradadoV(true);
                            vi.getLienzo2D().setDegradadoD(false);
                            this.btnPaleta1ActionPerformed(evt);
                            Color colorFrente = this.btnPaleta1.getBackground();
                            vi.getLienzo2D().setColorDegFrente(colorFrente);
                            this.btnPaleta2ActionPerformed(evt);
                            Color colorFondo = this.btnPaleta2.getBackground();
                            vi.getLienzo2D().setColorDegFondo(colorFondo);
                            break;
                        }
                    case 3: // Gradiente horizontal
                        {
                            JOptionPane.showMessageDialog(null, "Selecciona el color de frente y el color de fondo de la paleta de colores.");
                            vi.getLienzo2D().setRelleno(false);
                            vi.getLienzo2D().setDegradadoV(false);
                            vi.getLienzo2D().setDegradadoH(true);
                            vi.getLienzo2D().setDegradadoD(false);
                            this.btnPaleta1ActionPerformed(evt);
                            Color colorFrente = this.btnPaleta1.getBackground();
                            vi.getLienzo2D().setColorDegFrente(colorFrente);
                            this.btnPaleta2ActionPerformed(evt);
                            Color colorFondo = this.btnPaleta2.getBackground();
                            vi.getLienzo2D().setColorDegFondo(colorFondo);
                            break;
                        }
                    case 4: // Gradiente diagonal
                        {
                            JOptionPane.showMessageDialog(null, "Selecciona el color de frente y el color de fondo de la paleta de colores.");
                            vi.getLienzo2D().setRelleno(false);
                            vi.getLienzo2D().setDegradadoV(false);
                            vi.getLienzo2D().setDegradadoH(false);
                            vi.getLienzo2D().setDegradadoD(true);
                            this.btnPaleta1ActionPerformed(evt);
                            Color colorFrente = this.btnPaleta1.getBackground();
                            vi.getLienzo2D().setColorDegFrente(colorFrente);
                            this.btnPaleta2ActionPerformed(evt);
                            Color colorFondo = this.btnPaleta2.getBackground();
                            vi.getLienzo2D().setColorDegFondo(colorFondo);
                            break;
                        }
                    default:
                        break;
                }
            }
        }
        this.repaint();
    }//GEN-LAST:event_listaTiposRellenoActionPerformed

    private void sliderTransparenciaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderTransparenciaStateChanged
        if(this.btnEditar.isSelected() && this.shapeSelec != null)
            this.shapeSelec.setNivelTransparencia(this.sliderTransparencia.getValue());
        else{
            VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo2D().setNivelTransparencia(this.sliderTransparencia.getValue());
            }
        }
        this.repaint();        
    }//GEN-LAST:event_sliderTransparenciaStateChanged

    private void btnMoverFiguraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoverFiguraActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null && this.shapeSelec != null) {
            Point2D p1 = new Point2D.Double(this.shapeSelec.getBounds().x, this.shapeSelec.getBounds().y);
            Rectangle boundingbox = new Rectangle();
            Point2D p2 = new Point2D.Double(Double.parseDouble(this.txtFormateadoX.getText()), Double.parseDouble(this.txtFormateadoY.getText()));
            
            this.shapeSelec.setLocation(p1, p2);
            boundingbox = this.shapeSelec.getBounds();
            boundingbox.setFrame(boundingbox.getX(), boundingbox.getY(), boundingbox.getWidth(), boundingbox.getHeight());
            vi.getLienzo2D().setBoundingbox(boundingbox);
            
            this.repaint();
        }
    }//GEN-LAST:event_btnMoverFiguraActionPerformed

    private void btnRecRedondeadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecRedondeadoActionPerformed
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if(vi != null){
            vi.getLienzo2D().setHerrSelec(LienzoImagen2D.herramientasDibujo.RECTANGULO);
            vi.getLienzo2D().setRecRedondeado(true);
        }
        this.txtBarraEstado.setText("Rectángulo redondeado");  
    }//GEN-LAST:event_btnRecRedondeadoActionPerformed

    private LookupTable funcionLookupPropia(double w){
        double max = 0.0;
        double K;
        byte f[] = new byte[256];

        for(int i=0; i<256; i++){ // x² / exp(6)
            f[i] = (byte)(Math.abs(Math.pow(i, 2)) / (Math.exp(w)));
            if(f[i]>max)
                max = f[i];
        }
        // max = 127.0
        K = 255.0 / max;
        for(int i=0; i<256; i++){ // x² / exp(6)
            f[i] = (byte)(K * Math.abs(Math.pow(i, 2)) / (Math.exp(w)));
        }        
        
        ByteLookupTable blt = new ByteLookupTable(0, f);
  
        return blt;
    }
    
    private void btnLookupOpPropioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLookupOpPropioActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.getLienzo2D().getImage();
            if(imgSource!=null){
                try{
                    LookupOp lop = new LookupOp(this.funcionLookupPropia(6.0D), null);
                    BufferedImage imgDest = lop.filter( imgSource , imgSource);
                    vi.getLienzo2D().setImage(imgDest);
                    vi.getLienzo2D().repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }          
    }//GEN-LAST:event_btnLookupOpPropioActionPerformed

    private void btnOpPropiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpPropiaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null){
            imgSource = vi.getLienzo2D().getImage();
            if(imgSource!=null){
                try{
                    MyOpPropia opPropia = new MyOpPropia(this.listaDisfunsionVisual.getSelectedIndex());
                    opPropia.filter( imgSource , imgSource);
                    vi.repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }         
    }//GEN-LAST:event_btnOpPropiaActionPerformed

    private void btnOpPropia2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpPropia2ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null){
            imgSource = vi.getLienzo2D().getImage();
            if(imgSource!=null){
                try{
                    MyOpPropia2 opPropia2 = new MyOpPropia2();
                    opPropia2.filter( imgSource , imgSource);
                    vi.repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }           
    }//GEN-LAST:event_btnOpPropia2ActionPerformed

    private void menuImagenRedimensionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuImagenRedimensionarActionPerformed
        JTextField ancho = new JTextField();
        JTextField alto = new JTextField();
        Icon icono = new ImageIcon(getClass().getResource("/iconos/redimensionar.png"));
        
        Object[] campos = {
            "Ancho", ancho, "Alto", alto
        };
        
        JOptionPane.showConfirmDialog(null, campos, "Nuevo tamaño", JOptionPane.CLOSED_OPTION, 2, icono);
        
        if(ancho != null && alto != null){
            this.anchoVentana = Integer.parseInt(ancho.getText());
            this.altoVentana = Integer.parseInt(alto.getText());
        }
    }//GEN-LAST:event_menuImagenRedimensionarActionPerformed

    private void checkBarraLateralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBarraLateralActionPerformed
        this.barraLateral.setVisible(this.checkBarraLateral.isSelected());
    }//GEN-LAST:event_checkBarraLateralActionPerformed

    private void menuAyudaAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAyudaAcercaDeActionPerformed
	JLabel programa = new JLabel("Paint Basico 2D - Sistemas Multimedia", JLabel.CENTER);
        JLabel version = new JLabel("v1.0", JLabel.CENTER);
	JLabel autor = new JLabel("Francisco Fernández Millán", JLabel.CENTER);
	Icon icono = new ImageIcon(getClass().getResource("/iconos/iconoPaletaAcercade.png"));

        
        Object[] campos = {
            programa, version, autor
        };
        
        JOptionPane.showConfirmDialog(null, campos, "Acerca de", JOptionPane.CLOSED_OPTION, 2, icono);
    }//GEN-LAST:event_menuAyudaAcercaDeActionPerformed

    private void btnNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNegativoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo2D().getImage();
            if(imgSource!=null){
                try{
                int type = LookupTableProducer.TYPE_NEGATIVE;
                LookupTable lt = LookupTableProducer.createLookupTable(type);
                LookupOp lop = new LookupOp(lt, null);
                // Imagen origen y destino iguales
                lop.filter( imgSource , imgSource);
                vi.repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }            
    }//GEN-LAST:event_btnNegativoActionPerformed

    private void menuImagenDuplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuImagenDuplicarActionPerformed
        this.btnDuplicarVentanaActionPerformed(evt);
    }//GEN-LAST:event_menuImagenDuplicarActionPerformed

    private void btnArcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArcoActionPerformed
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if(vi != null)
            vi.getLienzo2D().setHerrSelec(LienzoImagen2D.herramientasDibujo.ARCO);
        this.txtBarraEstado.setText("Arco");
    }//GEN-LAST:event_btnArcoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar barraEdicion;
    private javax.swing.JToolBar barraHerramientas;
    private javax.swing.JToolBar barraLateral;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.ButtonGroup botonesHerr;
    protected javax.swing.JToggleButton btnAlisado;
    private javax.swing.JToggleButton btnArco;
    private javax.swing.JButton btnAumentarEscala;
    private javax.swing.JButton btnBHAbrir;
    private javax.swing.JButton btnBHGuardar;
    private javax.swing.JButton btnBHNuevo;
    private javax.swing.JButton btnBandas;
    private javax.swing.JButton btnCamara;
    private javax.swing.JButton btnCapturaWebcam;
    private javax.swing.JButton btnContraste;
    private javax.swing.JButton btnDisminuirEscala;
    private javax.swing.JButton btnDuplicarVentana;
    private javax.swing.JButton btnEcualizar;
    protected javax.swing.JToggleButton btnEditar;
    protected javax.swing.JToggleButton btnElipse;
    private javax.swing.JToggleButton btnGrabarSonido;
    private javax.swing.JButton btnIluminar;
    protected javax.swing.JToggleButton btnLapiz;
    protected javax.swing.JToggleButton btnLinea;
    private javax.swing.JButton btnLookupOpPropio;
    private javax.swing.JButton btnMoverFigura;
    private javax.swing.JButton btnNegativo;
    private javax.swing.JButton btnOpPropia;
    private javax.swing.JButton btnOpPropia2;
    private javax.swing.JButton btnOscurecer;
    private javax.swing.JButton btnPaleta1;
    private javax.swing.JButton btnPaleta2;
    private javax.swing.JButton btnPlaySonido;
    private javax.swing.JToggleButton btnRecRedondeado;
    protected javax.swing.JToggleButton btnRectangulo;
    private javax.swing.JButton btnRestaBinaria;
    private javax.swing.JButton btnRotacion180;
    private javax.swing.JButton btnRotacion270;
    private javax.swing.JButton btnRotacion90;
    private javax.swing.JButton btnSeno;
    private javax.swing.JButton btnSepia;
    private javax.swing.JButton btnStopSonido;
    private javax.swing.JButton btnSumaBinaria;
    private javax.swing.JButton btnTintado;
    protected javax.swing.JToggleButton btnTransparencia;
    private javax.swing.JCheckBoxMenuItem checkBarraEdicion;
    private javax.swing.JCheckBoxMenuItem checkBarraEstado;
    private javax.swing.JCheckBoxMenuItem checkBarraFormas;
    private javax.swing.JCheckBoxMenuItem checkBarraLateral;
    protected javax.swing.JDesktopPane escritorio;
    protected javax.swing.JComboBox<String> listaColores;
    protected javax.swing.JComboBox<String> listaColores2;
    private javax.swing.JComboBox<String> listaDisfunsionVisual;
    private javax.swing.JComboBox<String> listaEspacioColor;
    protected javax.swing.JComboBox<MyShape> listaFiguras;
    private javax.swing.JComboBox<String> listaFiltros;
    private javax.swing.JComboBox<File> listaReproduccionSonido;
    private javax.swing.JComboBox<String> listaTipoTrazos;
    private javax.swing.JComboBox<String> listaTiposRelleno;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuItem menuArchivoAbrir;
    private javax.swing.JMenuItem menuArchivoGuardar;
    private javax.swing.JMenuItem menuArchivoNuevo;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenuItem menuAyudaAcercaDe;
    private javax.swing.JMenu menuImagen;
    private javax.swing.JMenuItem menuImagenDuplicar;
    private javax.swing.JMenuItem menuImagenRedimensionar;
    private javax.swing.JMenu menuVer;
    private javax.swing.JPanel panelBarraEstado;
    private javax.swing.JPanel panelBarraHerr1;
    private javax.swing.JPanel panelBarraHerr2;
    private javax.swing.JPanel panelBarraHerr3;
    private javax.swing.JPanel panelBarraHerr4;
    private javax.swing.JPanel panelBarraHerr5;
    private javax.swing.JPanel panelBinarios;
    private javax.swing.JPanel panelBrillo;
    private javax.swing.JPanel panelCentral;
    private javax.swing.JPanel panelColor;
    private javax.swing.JPanel panelContraste;
    private javax.swing.JPanel panelDuplicar;
    private javax.swing.JPanel panelEscalado;
    private javax.swing.JPanel panelFiltros;
    private javax.swing.JPanel panelMover;
    private javax.swing.JPanel panelOperaciones;
    private javax.swing.JPanel panelRotacion;
    private javax.swing.JPanel panelUmbralización;
    private javax.swing.JToolBar.Separator separador1;
    private javax.swing.JToolBar.Separator separador2;
    private javax.swing.JToolBar.Separator separador3;
    private javax.swing.JToolBar.Separator separador4;
    private javax.swing.JToolBar.Separator separador5;
    private javax.swing.JToolBar.Separator separador6;
    private javax.swing.JToolBar.Separator separador7;
    private javax.swing.JSlider sliderBrillo;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JSlider sliderTransparencia;
    private javax.swing.JSlider sliderUmbralización;
    protected javax.swing.JSpinner spinnerGrosor;
    protected javax.swing.JLabel txtBarraEstado;
    private javax.swing.JLabel txtCoordenadasXY;
    private javax.swing.JFormattedTextField txtFormateadoX;
    private javax.swing.JFormattedTextField txtFormateadoY;
    private javax.swing.JLabel txtRelleno;
    private javax.swing.JLabel txtTrazo;
    public javax.swing.JLabel txtValorRGB;
    // End of variables declaration//GEN-END:variables
}
